/*
 * Copyright © 2012, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * All rights reserved.
 * 
 * The NASA Tensegrity Robotics Toolkit (NTRT) v1 platform is licensed
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0.
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
*/

#ifndef JSON_QUAD_FEEDBACK_CONTROL_H
#define JSON_QUAD_FEEDBACK_CONTROL_H

/**
 * @file JSONFeedbackControl.h
 * @brief A controller for the template class BaseSpineModelLearning
 * @author Brian Mirletz
 * @version 1.1.0
 * $Id$
 */

#include "dev/btietz/JSONTests/JSONCPGControl.h"

#include <json/value.h>

// Forward Declarations
class neuralNetwork;
class tgSpringCableActuator;

/**
 * JSONFeedbackControl learns the parameters for a CPG system on a
 * spine like tensegrity structure specified as a BaseSpineModelLearning. Parameters are generated by
 * AnnealEvolution and used in the CPGEquations family of classes.
 * tgImpedanceController controllers are used for the detailed muscle control.
 * Due to the number of parameters, the learned parameters are split
 * into one config file for the nodes and another for the CPG's "edges"
 */
class JSONQuadFeedbackControl : public JSONCPGControl
{
public:

struct Config : public JSONCPGControl::Config
    {
    public:
        /**
         * The only constructor. 
         */
        Config( int ss,
        int tm,
        int om,
        int param,
        int segnum = 6,
        double ct = 0.1,
        double la = 0,
        double ha = 30,
        double lp = -1 * M_PI,
        double hp = M_PI,
        double kt = 0.0,
        double kp = 1000.0,
        double kv = 100.0,
        bool def = true,
        double cl = 10.0,
        double lf = 0.0,
        double hf = 30.0,
        double ffMin = 0.0,
        double ffMax = 0.0,
        double afMin = 0.0,
        double afMax = 0.0,
        double pfMin = 0.0,
        double pfMax = 0.0,
		double maxH = 60.0, //May need to tune this value more
		double minH = 1.0,   //Perhaps same
		double hffMin = 0.0,
		double hffMax = 0.0
        );
        
        const double freqFeedbackMin;
        const double freqFeedbackMax;
        const double ampFeedbackMin;
        const double ampFeedbackMax;
        const double phaseFeedbackMin;
        const double phaseFeedbackMax;

		const double maxHeight;
		const double minHeight;

		const double highFreqFeedbackMin;
		const double highFreqFeedbackMax;
        
        // Values to be filled in by JSON file during onSetup
        int numStates;
        int numActions;
        
    };

    JSONQuadFeedbackControl(JSONQuadFeedbackControl::Config config,	
							std::string args,
							std::string resourcePath = "");
    
    virtual ~JSONQuadFeedbackControl();
    
    virtual void onSetup(BaseSpineModelLearning& subject);
    
    virtual void onStep(BaseSpineModelLearning& subject, double dt);
    
    virtual void onTeardown(BaseSpineModelLearning& subject);
	
protected:

    virtual void setupCPGs(BaseSpineModelLearning& subject, array_2D nodeActions, array_4D edgeActions);
	virtual void setupHighCPGs(array_2D nodeActions, array_4D highEdgeActions, Json::Value highLowEdgeActions);
	//virtual void setupHighCouplings(array_4D highEdgeActions);
	// I'm cheating and just using the Json thing directly. ~B
	//virtual void setupHighLowCouplings(Json::Value highLowEdgeActions);
    
    virtual array_4D scaleEdgeActions (Json::Value edgeParam);
    virtual array_2D scaleNodeActions (Json::Value actions);
    virtual array_4D scaleHighEdgeActions (Json::Value highEdgeParam);
    
    std::vector<double> getFeedback(BaseSpineModelLearning& subject);
    
    std::vector<double> getCableState(const tgSpringCableActuator& cable);
    
    std::vector<double> transformFeedbackActions(std::vector< std::vector<double> >& actions);
    
    JSONQuadFeedbackControl::Config m_config;

	// Hacky and probably temporary. Or maybe not. ¯\_(ツ)_/¯
	// Make array of 9 basic body parts. Each body part has vector of CPG controllers.
    std::vector<tgCPGActuatorControl*> m_controllers[9];

	// Higher level CPGs
	std::vector<tgCPGActuatorControl*> m_highControllers;
    
    /// @todo generalize this if we need more than one
    neuralNetwork* nn;

	// How many different body parts we're using in the goat/puppy dealy thing
	int n_bodyParts;
	// Helps us keep track of the number of muscles in each body part
	int n_muscSpine;	// how many controllable muscles in the spine
	int n_muscHip;		// how many controllable muscles in each hip/shoulder
	int n_muscLeg;		// how many controllable muscles in each leg
    
};

#endif // JSON_QUAD_FEEDBACK_CONTROL_H
